https://github.com/facebook/create-react-app

>> Create-React-App is a command line interface tool that allows us to quickly
   create and run React Applications with no configuration.

>> What that means is we simply run a command and an entire React project is 
   created for us.

* What is NPX ? 
-> NPX is an npm package runner which gets installed when you install Node.
   And that is how we're directly able to run, create React App without 
   having to install it. NPX takes care of that for us.

* package.json 
-> This files contain the dependencies and the scripts required for the project.
   
* package-lock.json 
-> Based on whether we have just `npm` or `yarn` as a package manager, we're gonna see yarn-lock or package-lock files.
-> They simply ensure consistent installation of your dependencies.

* node_modules
-> The folder in which all the depencencies are installed. Generated when we run `npm install` or `create-react-app`
   command.

* Functional Component & Class Component 
-> What is the advantage of using one over the other and when 
   exactly should you use a particular component type ?

-> Earlier, Functional components were stateless. But, Hooks are a new 
   feature proposal that lets you use state and other React features 
   without writing a class.

Before jumping in to hooks - few things to consider 
  - learn how to use state, lifecycle methods and `this` binding in Class components.

* JSX - JavaScript XML - Extension to the JavaScript language syntax.
- Write XML-like code for elements and components.
- JSX tags have a tag name, attributes, and children.
- JSX ultimately transpiles to pure JavaScript which is understood by the browsers.

- Each JSX element is just syntactic sugar for calling React.CreateElement

- Props which is the short form for properties is the optional input that your component 
  can accept. It also allows the component to by dynamic.

- Props is just an object that contains the attributes and their values which have been 
  passed from the parent component. They are used to make the component re-usable.

- Unlike the functional component where we specify the props parameter ; In a class 
  component the properties are available through `this.props` which is reserved in class components.

- Understand `props.children` from here --> `https://codeburst.io/a-quick-intro-to-reacts-props-children-cb3d2fce4891`

- Props are immutable.
- Now, we might have a question, if props are immutable how do we maintain component data that might change 
  over time ?

- The answer to this is `State`.

- props vs state 

  : Props get passed to the component while state is managed within the component.
  
  : Because a parent usually passes down the props to the child component, 
    props are immutable. The parent owns the props and cannot be changed 
    by the children.

  : State on the other hand is managed within the component and hence the 
    component has fully control to change the state.

  : In functional components, props can be accessed using the props parameter
    and in class components props can be accessed using this.props.

  : State on the other hand can be accessed using the useState hook in functional 
    components & this.state in class components.

  : A state is nothing but an object that is privately maintained inside a component.
  : A state can influence what is rendered in the browser.
