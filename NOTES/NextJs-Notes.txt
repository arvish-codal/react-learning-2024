What is Next.js ?
> It is a React Framework for building web applications.

When building applications with React alone, it's not feasible to create a fully featured application 
ready for production. 

React is a library for building User interfaces (UI), responsible only for the view layer of an application.
As a developer, we need to make decisions about other features such as routing, data fetching and more.

Next.Js on the other hand is a React Framework. It uses React for building user interfaces but also provides
additional features that enable you to build production-ready applications.

These features include routing, optimized rendering, data fetching, bundling, compiling and more. We don't need 
to install additional packages as Next.js provides everything we need.

However, NextJs being a framework has opinions and conventions that should be followed to implement these features.


To create a new NextJS project, we need to run the following command :- 
  - npx create-next-app@latest

The `.next` folder --> This folder is generated when we run either the dev or build scripts. (i.e for example - npm run dev)
It is from this folder that our NextJS application is served.

The `node_modules` folder --> This is where all the dependencies of our project are installed.

The `public` folder --> This folder holds all the static assets to be served such as images and SVG's.

Inside the `src` folder, we've one folder called app which is the newly introduced app router.

In the context of `Hello-World` project, 
> When we run the command `npm run dev`, the execution is transferred to `layout.tsx`, 
  The `RootLayout` Component is rendered.

> When we navigate to localhost:3000, the children prop will always refer to the component defined in `page.tsx` 
  in the `app` folder. That component is the `Home` component which is then rendered in the browser.

  React Server Components is a new architecture introduced by the React team in version 18.
  The architecture introduces a new way of creating React Components - splitting them into two types :-
   - Server Components & Client Components

> Server Components :- 
 - In Next.js, all components are Server components by default. They have the ability to run tasks like reading files or
   fetching data from a database. 
 - However, they don't have the ability to use Hooks or handle user interactions.

> Client Compontoents :-

 - To create a Client component, it's necessary to add "use client" at the top of the component file. Client components are the
   traditional React components.

NextJS has a file-system based routing mechanism where the URL paths accessible in the browser are defined by files & folders within 
our codebase.

Some points to note :- 
 - The `page.tsx` file within the app folder corresponds to the domain root and page.tsx files within the subfolders are associated
   with routes based on their folder names such as `about` and `profile` .

Routing Conventions :-
 - All routes must be placed inside the app folder.
 - Every file that corresponds to a route must be named page.js or page.tsx 
 - Every folder corresponds to a path segment in the browser URL.

 When these conventions are followed, the file automatically becomes available as a route.

 By creating a nested folder structure, files will automatically be routed in the same way within the URL. ( Refer to `blog` folder within the `NextJS/hello-world` project.)

 While this approach works for now, it's not always feasible to define routes using pre-defined paths espesically for 
 complex applications. We need dynamic routes in that case.

 In NextJS, we can enclose a folder name with brackets to create a dynamic route. (See `products` folder in NextJS/hello-world project)
 NextJS treats square brackets in a folder name as a dynamic segment enabling us to create dynamic routes.

NOTE :-  Every page in the app router receives route parameters as a prop.

When building complex application, it is common to encounter scenarios where multiple dynamic route segments are required.
For ex - /products/1 - is handled with dynamic routes.
But for handling - /products/1/reviews/1 - we need nested dynamic routes.

When dealing with multiple path segments, the solution lies in a nested folder structure.
It is possible to create nested dynamic routes by having dynamic segments in the folder names. (See `products` and `reviews` folder structures inside the `NextJS/hello-world` project)

`Catch all segments` route captures all URL segments and maps them to a single file in our project (i.e the `page.tsx` file in our `app/docs/[...slug]` folder)

This is particularly useful for documentation where we want different segments for better organisation & SEO, but the layout of the document remains the same. We define it once, but render it
for multiple variations of the URL.

NextJS Tutorial - 9 - From 6:50 mins,  (If we simply go to /docs, we get a 404. (which is taken care of by NextJS) )

However, if we wish to display the `<h1>Docs home page</h1>` in case of no slug, we've to make use of optional catchall segments.
All we've to do is wrap the square brackets with another pair of square brackets. ( i.e [[...slug]] in place of [..slug] )

Although NextJS provides routing conventions to follow, it remains flexible regarding how we structure our project files & folders.

FILE COLOCATION 
 - We already know that NextJS uses a file system based router where each folder represents a route segment mapped to a corresponding segment in the URL path.
   It's important to note that a route isn't publicly accessible until a `page.js` or `page.tsx` is added to the respective route segment.
 
 - Even when a route becomes publicly accessible, only the content returned by `page.tsx` is sent to the client. The content returned must be a 
   default exported React Component.


Private Folders :- 

 - A private folder indicates that it is a private implementation detail and should not be considered by the routing system.
 - This means that the folder & all its sub-folders are excluded from routing.

 - A private folder should be prefixed by an underscore. Within that folder, we can have utility functions.

 - Private folders can be helpful in few different scenarios : 
   : For separating UI logic from routing logic.
   : For consistently organizing internal files across a project.
   : For sorting and grouping files in code editors.
   : For avoiding potential naming conflicts with future NextJS file conventions.

 See _lib (It is a private folder, the component in it won't be rendered)
 However, if you keep the encoded URL segment, it will be served. (for `_`, we can write `%5F`)